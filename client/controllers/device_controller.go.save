package controllers

import (
    "context"
    "fiber-mongo-api/configs"
    "fiber-mongo-api/models"
    "fiber-mongo-api/responses"
    "net/http"
    "time"
    "github.com/gofiber/fiber/v2"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/bson" //add this
    "github.com/go-playground/validator/v10"
    "go.mongodb.org/mongo-driver/bson/primitive"
//     "fiber-mongo-api/configs" //add this
google.golang.org/grpc"
    pb "github.com/Raelhoff/gRPC_GO/protofiles"
	
    
  //  "google.golang.org/protobuf/types/known/timestamppb"
)

var deviceCollection *mongo.Collection = configs.GetCollection(configs.DB, "devices")
var validateDevice = validator.New()
var comm * grpc.ClientConn  = configs.ReturnClientGRPC()


 
// grpc server address
const address = "localhost:8000"

func CreateDevice(c *fiber.Ctx) error {
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    var device models.Device
    defer cancel()

    //validate the request body
    if err := c.BodyParser(&device); err != nil {
        return c.Status(http.StatusBadRequest).JSON(responses.DeviceResponse{Status: http.StatusBadRequest, Message: "error: BodyParser", Data: &fiber.Map{"data": err.Error()}})
    }

    //use the validator library to validate required fields
    if validationErr := validateDevice.Struct(&device); validationErr != nil {
        return c.Status(http.StatusBadRequest).JSON(responses.DeviceResponse{Status: http.StatusBadRequest, Message: "error: validation", Data: &fiber.Map{"data": validationErr.Error()}})
    }

    // Create a client instance
//    c := pb.NewLoraTransactionClient(client)
   // c  = configs.GetProtofileLoraTransaction()  
   //c  = configs.GetProtofileLoraTransaction()

/*
    // Lets invoke the remote function from client on the server
    c.MakeTransaction(
	context.Background(),
	&pb.LoraRequest{
		IdDevice:     17081990,
		Id:           1234,
		Input1:       0,
		Input2:       0,
		Output:       0,
		AlarmBattery: false,
		AlarmPower:   false,
		SensorError:  false,
		Sensors: []*pb.LoraRequest_Sensor{
			{Type: 1, Value: 30},
			{Type: 2, Value: 15},
		},
		LastUpdated: timestamppb.Now(),
	},
     )
    
/*
{ version: 111,
  id: 1459633408,
  timestamp: 1685407036,
  input1: 1,
  input2: 1,
  output: 0,
  alarm_battery: false,
  alarm_power: false,
  sensor_error: false,
  sensors: [ { type: 0, value: 24.870001 }, { type: 1, value: 65.970001 } ] }
*/


    newDevice := models.Device{
        InsertedID:       primitive.NewObjectID(),
        IdDevice:     device.IdDevice,
        Input1:    device.Input1,
        Input2:    device.Input2,
        Output:    device.Output,
        Alarm_battery:    device.Alarm_battery,
        Alarm_power:    device.Alarm_power,
        Sensor_error:    device.Sensor_error,
        LastUpdated: time.Now(),
        Sensors_obj:     device.Sensors_obj,
    }

    result, err := deviceCollection.InsertOne(ctx, newDevice)
    if err != nil {
        return c.Status(http.StatusInternalServerError).JSON(responses.DeviceResponse{Status: http.StatusInternalServerError, Message: "error", Data: &fiber.Map{"data": err.Error()}})
    }

    return c.Status(http.StatusOK).JSON(responses.DeviceResponse{Status: http.StatusOK, Message: "success", Data: &fiber.Map{"data": result}})
}

func GetAllDevices(c *fiber.Ctx) error {
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    var devices []models.Device
    defer cancel()

    results, err := deviceCollection.Find(ctx, bson.M{})

    if err != nil {
        return c.Status(http.StatusInternalServerError).JSON(responses.DeviceResponse{Status: http.StatusInternalServerError, Message: "error", Data: &fiber.Map{"data": err.Error()}})
    }

    //reading from the db in an optimal way
    defer results.Close(ctx)
    for results.Next(ctx) {
        var singleDevice models.Device
        if err = results.Decode(&singleDevice); err != nil {
            return c.Status(http.StatusInternalServerError).JSON(responses.DeviceResponse{Status: http.StatusInternalServerError, Message: "error", Data: &fiber.Map{"data": err.Error()}})
        }

        devices = append(devices, singleDevice)
    }

    return c.Status(http.StatusOK).JSON(
        responses.DeviceResponse{Status: http.StatusOK, Message: "success", Data: &fiber.Map{"data": devices}},
    )
}
